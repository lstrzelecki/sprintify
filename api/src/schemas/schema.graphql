type Query {
  dashboard: Dashboard
}

type Dashboard {
  backlog: [Story],
  milestones: [Milestone],
  deadlines: [Deadline],
  currentSprint: Sprint
}

type Story {
  num: String,
  title: String,
  size: Int
}

type Milestone {
  name: String,
  after: Int
}

type Deadline {
  name: String,
  date: String
}

type Sprint {
  stories: [Story],
  start: String,
  end: String
}

input StoryInput {
  num: String!,
  title: String!,
  size: Int = 1
}

type StoryNum {
  num: String
}

type Mutation {
  createStory(story: StoryInput): StoryNum,
  updateStory(story: StoryInput): StoryNum
}

type StoryCreatedEvent {
  num: String
  title: String
  size: Int
}

type StoryUpdatedEvent {
  num: String
  title: String
  size: Int
}

union DashboardUpdatedEvent = StoryCreatedEvent | StoryUpdatedEvent

type Subscription {
  dashboardUpdates: DashboardUpdatedEvent
}